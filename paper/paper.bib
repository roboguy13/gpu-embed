@article{Gill:2014:DSLSynth,
  author = {Gill, Andy},
  title = {Domain-Specific Languages and Code Synthesis Using Haskell},
  year = {2014},
  issue_date = {June 2014},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {57},
  number = {6},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/2605205},
  doi = {10.1145/2605205},
  journal = {Commun. ACM},
  month = jun,
  pages = {42–49},
  numpages = {8}
}

@inproceedings{Ganz:99:Trampolined,
  author = {Ganz, Steven E. and Friedman, Daniel P. and Wand, Mitchell},
  title = {Trampolined Style},
  year = {1999},
  isbn = {1581131119},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/317636.317779},
  doi = {10.1145/317636.317779},
  booktitle = {Proceedings of the Fourth ACM SIGPLAN International Conference on Functional Programming},
  pages = {18–27},
  numpages = {10},
  location = {Paris, France},
  series = {ICFP ’99}
}

@inproceedings{Grebe:2017:RSD:3136040.3136048,
  author = {Grebe, Mark and Young, David and Gill, Andy},
  title = {Rewriting a Shallow DSL Using a GHC Compiler Extension},
  booktitle = {Proceedings of the 16th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
  series = {GPCE 2017},
  year = {2017},
  isbn = {978-1-4503-5524-7},
  location = {Vancouver, BC, Canada},
  pages = {246--258},
  numpages = {13},
  doi = {10.1145/3136040.3136048},
  acmid = {3136048},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {Arduino, EDSL, GHC, Haskell, Transformations},
}

@inproceedings{Atkey:09:Unembedding,
  author = {Atkey, Robert and Lindley, Sam and Yallop, Jeremy},
  title = {Unembedding Domain-Specific Languages},
  year = {2009},
  isbn = {9781605585086},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1596638.1596644},
  doi = {10.1145/1596638.1596644},
  booktitle = {Proceedings of the 2nd ACM SIGPLAN Symposium on Haskell},
  pages = {37–48},
  numpages = {12},
  keywords = {higher-order abstract syntax, type classes, unembedding, domain-specific languages},
  location = {Edinburgh, Scotland},
  series = {Haskell ’09}
}

@inproceedings{Elliott-2018-ad-icfp,
  author    = {Conal Elliott},
  title     = {The simple essence of automatic differentiation},
  booktitle = {Proceedings of the ACM on Programming Languages (ICFP)},
  year      = {2018},
  url       = {http://conal.net/papers/essence-of-ad/}
}

@article{Elliott2019-convolution-extended,
  author  = {Conal Elliott},
  title   = {Generalized convolution and efficient language recognition (extended version)},
  journal = {CoRR},
  mon     = mar,
  year    = {2019},
  volume  = {abs/1903.10677},
  url     = {https://arxiv.org/abs/1903.10677}
}

@inproceedings{Elliott2015-Ivory,
author = {Elliott, Trevor and Pike, Lee and Winwood, Simon and Hickey, Pat and Bielman, James and Sharp, Jamey and Seidel, Eric and Launchbury, John}, 
editor = {}, 
title = {Guilt free ivory}, 
booktitle = {Proceedings of the 8th ACM SIGPLAN Symposium on Haskell}, 
publisher = {ACM}, 
address = {}, 
pages = {189-200}, 
year = {2015}, 
abstract = {Abstract Ivory is a language that enforces memory safety and avoids most undefined behaviors while providing low-level control of memory-manipulation. Ivory is embedded in a modern variant of Haskell, as implemented by the GHC compiler. The main contributions.}, 
keywords = {}}

@inproceedings{Hickey,
author = {Hickey, Patrick C and Pike, Lee and Elliott, Trevor and Bielman, James and Launchbury, John}, 
editor = {}, 
title = {Building embedded systems with embedded DSLs}, 
booktitle = {Proceedings of the 19th ACM SIGPLAN international conference on Functional programming}, 
publisher = {ACM}, 
address = {}, 
pages = {3-9}, 
year = {2014}, 
abstract = {Faking a module system In Ivory and Tower, top-level functions and structures are packaged into a Haskell data structure to provide to the Ivory compiler. The onus is on the programmer to package up all the necessary components.}, 
keywords = {}}

@inproceedings{Axelsson:10:Feldspar,
  Author = {Emil Axelsson and Koen Claessen and Gergely D{\'e}vai and Zolt{\'a}n Horv{\'a}th and Karin Keijzer and Bo Lyckeg{\aa}rd and Anders Persson and Mary Sheeran and Josef Svenningsson and Andras Vajdax},
  Booktitle = {MEMOCODE'10},
  Pages = {169-178},
  Title = {Feldspar: A domain specific language for digital signal processing algorithms.},
  Year = {2010}}

@Incollection{Svenningsson:13:Combining,
author = {Svenningsson, Josef and Axelsson, Emil}, 
title = {Combining deep and shallow embedding for {EDSL}}, 
booktitle = {Trends in Functional Programming}, 
editor = {}, 
publisher = {Springer}, 
address = {}, 
pages = {21-36}, 
year = {2013}, 
abstract = {Abstract When compiling embedded languages it is natural to use an abstract syntax tree to represent programs. This is known as a deep embedding and it is a rather cumbersome technique compared to other forms of embedding, typically leading to more code and.}, 
keywords = {}}

@inproceedings{ Sculthorpe:13:ConstrainedMonad,
    author    = "Neil Sculthorpe and Jan Bracker and George Giorgidze and Andy Gill",
    title     = "The Constrained-Monad Problem",
    booktitle = "Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming",
    publisher = "ACM",
    location  = "Boston, Massachusetts",
    url       = "http://dl.acm.org/citation.cfm?doid=2500365.2500602",
    pages     = "287--298",
    year      = 2013
}



@incollection{Persson:11:MonadicDSL,
year={2012},
booktitle={Implementation and Application of Functional Languages},
volume={7257},
series={Lecture Notes in Computer Science},
editor={Gill, Andy and Hage, Jurriaan},
title={Generic Monadic Constructs for Embedded Languages},
publisher={Springer Berlin Heidelberg},
author={Persson, Anders and Axelsson, Emil and Svenningsson, Josef},
pages={85-99},
language={English}
}

@inproceedings{Svenningsson:13:Compositional,
author = {Svenningsson, Josef David and Svensson, Bo Joel}, 
editor = {}, 
title = {Simple and compositional reification of monadic embedded languages}, 
booktitle = {Proceedings of the 18th International Conference on Functional Programming}, 
publisher = {ACM}, 
address = {}, 
pages = {299-304}, 
year = {2013}, 
abstract = {Abstract When writing embedded domain specific languages in Haskell, it is often convenient to be able to make an instance of the Monad class to take advantage of the do-notation and the extensive monad libraries. Commonly it is desirable to compile such.}, 
keywords = {}}

@Article{Elliott:2017,
  author    = {Conal Elliott},
  title     = {Compiling to categories},
  journal   = {Proc. ACM Program. Lang.},
  volume    = {1},
  number    = {ICFP},
  articleno = {48},
  numpages  = {24},
  month     = sep,
  year      = {2017},
  url       = {http://conal.net/papers/compiling-to-categories},
  doi       = {http://dx.doi.org/10.1145/3110271}
}

@misc{github:lambda-ccc,
  author = "Conal Elliott",
  url    = "https://github.com/conal/lambda-ccc",
  year   = 2015
}
      
@misc{github:reification-rules,
  author = "Conal Elliott",
  url    = "https://github.com/conal/reification-rules",
  year   = 2016
}

@misc{github:Elliott:Talk:2015,
  author = "Conal Elliott",
  url    = "https://github.com/conal/talk-2015-haskell-to-hardware",
  year   = 2015      
}

@inproceedings{Sujeeth:2013,
 author = {Sujeeth, Arvind K. and Gibbons, Austin and Brown, Kevin J. and Lee, HyoukJoong and Rompf, Tiark and Odersky, Martin and Olukotun, Kunle},
 title = {Forge: Generating a High Performance DSL Implementation from a Declarative Specification},
 booktitle = {Proceedings of the 12th International Conference on Generative Programming: Concepts \&\#38; Experiences},
 series = {GPCE '13},
 year = {2013},
 isbn = {978-1-4503-2373-4},
 location = {Indianapolis, Indiana, USA},
 pages = {145--154},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2517208.2517220},
 doi = {10.1145/2517208.2517220},
 acmid = {2517220},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code generation, domain-specific languages, multi-stage programming, parallel programming},
} 

@Article{Sujeeth:2014,
author = {Sujeeth, Arvind K and Brown, Kevin J and Lee, Hyoukjoong and Rompf, Tiark and Chafi, Hassan and Odersky, Martin and Olukotun, Kunle}, 
title = {Delite: A compiler architecture for performance-oriented embedded domain-specific languages}, 
journal = {ACM Transactions on Embedded Computing Systems (TECS)}, 
volume = {13}, 
number = {4s}, 
pages = {1–25}, 
year = {2014}, 
abstract = {Developing high-performance software is a difficult task that requires the use of low-level, architecture-specific programming models (eg, OpenMP for CMPs, CUDA for GPUs, MPI for clusters). It is typically not possible to write a single application that can run efficiently in …}, 
location = {}, 
keywords = {}}

@inproceedings{Jovanovic:2014,
author = {Jovanovic, Vojin and Shaikhha, Amir and Stucki, Sandro and Nikolaev, Vladimir and Koch, Christoph and Odersky, Martin},
title = {Yin-Yang: Concealing the Deep Embedding of DSLs},
year = {2014},
isbn = {9781450331616},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2658761.2658771},
doi = {10.1145/2658761.2658771},
booktitle = {Proceedings of the 2014 International Conference on Generative Programming: Concepts and Experiences},
pages = {73–82},
numpages = {10},
keywords = {Macros, Deep Embedding, Embedded Domain-Specific Languages, Shallow Embedding, Reflection},
location = {V\"{a}ster\r{a}s, Sweden},
series = {GPCE 2014}
}

@article{Gill:09:WW,
  author = {Andy Gill and Graham Hutton},
  title = {The worker/wrapper transformation},
  journal = {Journal of Functional Programming},
  publisher = {Cambridge University Press},
  volume = {19},
  number = {2},
  pages = {227--251},
  month = {March},
  year = {2009},
}

